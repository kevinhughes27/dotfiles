[user]
name = Kevin Hughes
email = kevinhughes27@gmail.com
signingkey = ABDAFEE7

# include a local git config if it exists
# allows me to configure a different user
# and gpg key
[include]
path = ~/.localgc

[commit]
gpgsign = true

[gpg]
program = gpg

[url "git@github.com:"]
insteadOf = https://github.com/

[core]
excludesfile = ~/dotfiles/gitignore
pager = less --mouse

[push]
default = current
followTags = true

[fetch]
prune = true

[pull]
rebase = true

[merge]
ff = only

[status]
showUntrackedFiles = all

[pager]
branch = false

[help]
autocorrect = 1

[color]
branch = auto
diff = auto
status = auto
ui = true

[color "branch"]
current = yellow reverse
local = yellow
remote = green

[color "diff"]
meta = yellow bold
frag = magenta bold
old = red
new = cyan
moved = zebra

[color "status"]
added = yellow
changed = green
untracked = cyan

[alias]

# commit
ci = commit

# commit amend
cia = commit --amend --reuse-message=HEAD

# checkout
co = checkout

# cherry-pick
cp = cherry-pick

# switch between recently-used branches in a sweet interactive fashion. (Courtesy of Tim Uruski!)
sw = "!f() { git branch --sort='-committerdate' | fzf --height=10 | xargs git checkout; }; f"

# shorten branch commmands
br = branch

# stands for "set upstream". less typing to set upstream
su = !git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`

# shorten log commands
l = log

# shorten diff command
d = diff

# word diff, effectively ignore whitespace
wdiff = diff -w --word-diff=color

# e.g. `git whatadded src/some/file`
whatadded = log --diff-filter=A
whattouched = log --diff-filter=M

# stands for "branch delete"
bd = "!f() { git branch | fzf --multi | xargs git branch -D; }; f"

# stands for "fresh". switch to master/main and pull
fr = "!f() { \
  local mainbranch=`git remote show origin | grep 'HEAD branch' | cut -d' ' -f5`; \
  git checkout $mainbranch && git pull --autostash; \
}; f"

# stands for "new branch". `git nb foo` will create a new branch named `foo` based off the latest master/main.
nb = "!f() { \
  local mainbranch=`git remote show origin | grep 'HEAD branch' | cut -d' ' -f5`; \
  git checkout $mainbranch && git pull && git checkout -b $1; \
}; f"

# rebase the current branch against fresh master/main
r = "!git_rebase() { \
  local mainbranch=`git remote show origin | grep 'HEAD branch' | cut -d' ' -f5`; \
  git fetch origin $mainbranch:$mainbranch; \
  git rebase $mainbranch; \
}; git_rebase"

# `git ri` does an interactive rebase from the branch point
ri = "!git_rebase_i() { \
  local mainbranch=`git remote show origin | grep 'HEAD branch' | cut -d' ' -f5`; \
  local currbranch=`git rev-parse --abbrev-ref HEAD`; \
  local branchpoint=`git merge-base $mainbranch $currbranch`; \
  git rebase -i $branchpoint $currbranch; \
}; git_rebase_i"
