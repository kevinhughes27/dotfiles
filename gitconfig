[user]
name = Kevin Hughes
email = kevinhughes27@gmail.com
signingkey = ABDAFEE7

# override user and signing key if ~/.gituser exists
[include]
path = ~/.gituser

[commit]
gpgsign = true

[gpg]
program = gpg

[core]
excludesfile = ~/dotfiles/gitignore
pager = less --mouse

[push]
default = current
followTags = true

[fetch]
prune = true

[pull]
rebase = true

[merge]
ff = only

[status]
showUntrackedFiles = all

[pager]
branch = false

[help]
autocorrect = 1

[color]
branch = auto
diff = auto
status = auto
ui = true

[color "branch"]
current = yellow reverse
local = yellow
remote = green

[color "diff"]
meta = yellow bold
frag = magenta bold
old = red
new = cyan
moved = zebra

[color "status"]
added = yellow
changed = green
untracked = cyan

[alias]

# commit
ci = commit

# commit amend
cia = commit --amend --reuse-message=HEAD
cian = commit --amend --reuse-message=HEAD --no-verify

# checkout
co = checkout

# cherry-pick
cp = cherry-pick

# switch between recently-used branches in a sweet interactive fashion. (Courtesy of Tim Uruski!)
sw = "!f() { git branch --sort='-committerdate' | fzf --height=10 | xargs git checkout; }; f"

# shorten branch commmands
br = branch

# [S]et [U]pstream
su = !git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`

# [S]tash pull
spull = git stash && git pull && git stash pop

# shorten log commands
l = log

# shorten diff command
d = diff

# word diff, effectively ignore whitespace
wdiff = diff -w --word-diff=color

# e.g. `git whatadded src/some/file`
whatadded = log --diff-filter=A
whattouched = log --diff-filter=M

# [L]og [S]earch
ls = "!fzf_git_log() { \
  local format='%C(yellow)%h%C(red)%d%C(reset) - %C(bold green)(%ar)%C(reset) %s %C(blue)<%an>%C(reset)'; \
  local preview='git show --color=always {1}'; \
  git log --color=always --format=\"$format\" $@ | \
    fzf --ansi --no-sort --no-height --reverse --multi --delimiter ' ' --preview \"$preview\" | \
      cut -d ' ' -f1; \
}; fzf_git_log"

# [B]ranch [D]elete
bd = "!f() { git branch | fzf --multi | xargs git branch -D; }; f"

# [F]resh switch to master/main and pull
fr = "!f() { \
  local mainbranch=`git remote show origin | grep 'HEAD branch' | cut -d' ' -f5`; \
  git checkout $mainbranch && git pull --autostash; \
}; f"

# [N]ew [B]ranch". `git nb foo` will create a new branch named `foo` based off the latest master/main.
nb = "!f() { \
  local mainbranch=`git remote show origin | grep 'HEAD branch' | cut -d' ' -f5`; \
  git checkout $mainbranch && git pull && git checkout -b $1; \
}; f"

# [R]ebase the current branch against fresh master/main
r = "!git_rebase() { \
  local mainbranch=`git remote show origin | grep 'HEAD branch' | cut -d' ' -f5`; \
  git fetch origin $mainbranch:$mainbranch; \
  git rebase $mainbranch; \
}; git_rebase"

# [R]ebase [I]nteractive `git ri` does an interactive rebase from the branch point
ri = "!git_rebase_i() { \
  local mainbranch=`git remote show origin | grep 'HEAD branch' | cut -d' ' -f5`; \
  local currbranch=`git rev-parse --abbrev-ref HEAD`; \
  local branchpoint=`git merge-base $mainbranch $currbranch`; \
  git rebase -i $branchpoint $currbranch; \
}; git_rebase_i"

# [P]ush the current branch, confirm master/main push.
# allow force push unless master/main
p = "!git_push() { \
  local nargs=\"$#\"; \
  local currbranch=`git rev-parse --abbrev-ref HEAD`; \
  if echo \"$@\" | grep -q \"\\-d\"; then echo \"-d arg not allowed\"; exit 1; fi; \
  if [ $currbranch = \"HEAD\" ]; then echo \"not on a branch\"; exit 1; fi; \
  if [ $currbranch = \"master\" ] || [ $currbranch = \"main\" ]; then \
    if [ $nargs -gt 0 ]; then echo \"$currbranch push no args allowed\"; exit 1; fi; \
    echo \"push $currbranch, Are you sure? (y/n)\"; \
    read REPLY; \
    if [ $REPLY = \"y\" ] || [ $REPLY = \"Y\" ] ; then \
      git push origin $currbranch; \
    else \
      echo \"git push aborted\"; exit 1; \
    fi;\
  else \
    echo \"branch is not master or main. allow args\" > /dev/null; \
    git push origin $currbranch $@; \
  fi; \
}; git_push"
